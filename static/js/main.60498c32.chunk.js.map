{"version":3,"sources":["serviceWorker.js","Others/OvermindHelper.js","Components/CounterDemo.js","index.js"],"names":["Boolean","window","location","hostname","match","useOvermind","createHook","overmind","createOvermind","state","counter","actions","increase","number","CounterDemo","Grid","style","padding","container","direction","justify","alignItems","alignContent","Typography","Button","margin","color","variant","onClick","ReactDOM","render","StrictMode","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCZOC,EAAcC,cACdC,EAAWC,YAAe,CACnCC,MAAO,CACHC,QAAS,GAEbC,QAAS,CACLC,SADK,WACaC,GAAQ,EAAhBJ,MACAC,SAAWG,M,wBCYdC,EAnBK,WAAO,IAAD,EACGT,IAAlBI,EADe,EACfA,MAAOE,EADQ,EACRA,QAEd,OACI,kBAACI,EAAA,EAAD,CAAMC,MAAO,CAACC,QAAS,IAAKC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,SAC/EC,aAAa,UACf,kBAACC,EAAA,EAAD,KAAad,EAAMC,SACnB,kBAACK,EAAA,EAAD,CAAMG,WAAS,EAACC,UAAU,MAAME,WAAW,SAASC,aAAa,SAASF,QAAQ,UAC9E,kBAACI,EAAA,EAAD,CAAQR,MAAO,CAACS,OAAQ,GAAIC,MAAM,UAAUC,QAAQ,YAAYC,QAAS,WACrEjB,EAAQC,SAAS,KADrB,KAGA,kBAACY,EAAA,EAAD,CAAQR,MAAO,CAACS,OAAQ,GAAIC,MAAM,UAAUC,QAAQ,YAAYC,QAAS,WACrEjB,EAAQC,UAAU,KADtB,QCThBiB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUC,MAAOzB,GACb,kBAAC,EAAD,QAGR0B,SAASC,eAAe,SHqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60498c32.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// npm install overmind overmind-react\r\n// yarn add overmind overmind-react\r\n\r\nimport {createOvermind} from \"overmind\";\r\nimport {createHook} from \"overmind-react\";\r\n\r\nexport const useOvermind = createHook();\r\nexport const overmind = createOvermind({\r\n    state: {\r\n        counter: 0\r\n    },\r\n    actions: {\r\n        increase({state}, number) {\r\n            state.counter += number\r\n        },\r\n    }\r\n});\r\n","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useOvermind} from \"../Others/OvermindHelper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst CounterDemo = () => {\r\n    const {state, actions} = useOvermind()\r\n\r\n    return (\r\n        <Grid style={{padding: 48}} container direction='column' justify='center' alignItems='center'\r\n              alignContent='center'>\r\n            <Typography>{state.counter}</Typography>\r\n            <Grid container direction='row' alignItems='center' alignContent='center' justify='center'>\r\n                <Button style={{margin: 8}} color='primary' variant='contained' onClick={() => {\r\n                    actions.increase(1)\r\n                }}>+</Button>\r\n                <Button style={{margin: 8}} color='primary' variant='contained' onClick={() => {\r\n                    actions.increase(-1)\r\n                }}>-</Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CounterDemo;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"overmind-react\";\nimport {overmind} from './Others/OvermindHelper'\nimport CounterDemo from \"./Components/CounterDemo\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider value={overmind}>\n            <CounterDemo/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}